import os
import d3m
import unittest
import pandas as pd
from d3m import index
from d3m.metadata.base import ArgumentType
from d3m.metadata.pipeline import Pipeline, PrimitiveStep
from tods import generate_dataset, fit_pipeline, save_fitted_pipeline, load_fitted_pipeline, produce_fitted_pipeline, evaluate_pipeline, load_pipeline

from tods.detection_algorithm.core.UODCommonTest import UODCommonTest

from pyod.utils.data import generate_data
from d3m.container import DataFrame as d3m_dataframe
from tods.detection_algorithm.PyodAE import AutoEncoderPrimitive

from d3m.container.pandas import convert_lists, convert_ndarray
from d3m import container, utils

data = [
  [1,12183,0.0,3.7166666666667,5,2109,0],
  [2,12715,0.091757964510557,3.6108333333333,60,3229,0],
  [3,12736,0.17229675238449998,3.4813888888889,88,3637,0],
  [4,12716,0.22621935431999,3.3802777777778,84,1982,0],
  [5,12739,0.17635798469946,3.1933333333333,111,2751,0],
  [6,12737,0.090491245476051,2.7866666666667004,112,2128,0],
  [7,12857,0.08460994072769001,2.4627777777777995,1235,2109,0],
  [8,12884,0.06842699169496,2.2541666666667,710,2328,0],
  [9,12894,0.13330269689422,2.1180555555556,618,2453,0],
  [10,12675,0.085026586189321,2.0691666666667,84,2847,0],
  [11,13260,0.097073068447328,2.1972222222222,100,3659,0],
  [12,13470,0.0,2.3188888888889,125,5207,0],
  [13,13060,0.031063767542922,2.34,114,5146,0],
  [14,12949,0.017732750501525,2.4902777777778,145,4712,0],
  [15,13035,0.063354504072079,2.6438888888889,91,6363,0],
  [16,12980,0.087870391896335,2.8486111111111003,94,5010,0],
  [17,13677,0.11546815687729,2.8833333333333,79,3956,0],
  [18,13381,0.073413457727404,2.8808333333333,50,4063,0],
  [19,12737,0.040392584616896,2.9005555555556,39,3748,0],
  [20,12554,0.08911335594722301,3.0855555555556,28,3047,0],
  [21,12470,0.098030053711531,3.3536111111111,29,4099,0],
  [22,12490,0.047140641497552,3.7438888888889,24,2122,0],
  [23,12539,0.10481279080241,3.7947222222222,19,3387,0],
  [24,12530,0.20478886838928,3.801111111111101,21,1950,0],
  [25,13002,0.04485100631921201,3.6508333333333,27,2927,0],
  [26,12989,0.1053622140254,3.555,46,1889,0],
  [27,13038,0.08436887679639,3.4769444444444,133,1910,0],
  [28,13011,0.097980673762982,3.2158333333333,143,3747,0],
  [29,12984,0.10165726215275,3.1141666666667,86,4994,0],
  [30,13079,0.056764513454874,2.7983333333333,118,2009,0],
  [31,13048,0.074428708878932,2.4252777777778,56,2899,0],
  [32,13096,0.091244453451818,2.14,92,2298,0],
  [33,13003,0.094529332881679,1.9822222222222,85,1894,0],
  [34,13057,0.016638011234698,1.9694444444444,122,1999,0],
  [35,13023,0.038096861957006005,2.0741666666667,74,3007,0],
  [36,13033,0.064497814457643,2.2505555555556,84,2838,0],
  [37,13034,0.030426401876334,2.2819444444444,54,4113,0],
  [38,13068,0.095423209955973,2.4216666666667,77,2150,0],
  [39,13057,0.069688744272108,2.5997222222222005,84,3007,0],
  [40,13047,0.03468622413034,2.7544444444444003,139,2484,0],
  [41,13795,0.089564461084836,2.7258333333333,65,2101,0],
  [42,13528,0.07337616196456799,2.8302777777778,38,2001,0],
  [43,13032,0.061939295606039,2.9422222222222,35,2102,0],
  [44,13084,0.11419089175512,3.0919444444444,47,2129,0],
  [45,13000,0.10475925920163,3.3519444444444,37,4422,0],
  [46,13008,0.079657960399444,3.6952777777778,53,4573,0],
  [47,12978,0.14475546275416,3.8269444444444,55,1989,0],
  [48,13067,0.1421711341096,3.7877777777778,45,1953,0],
  [49,13086,0.07696963969656899,3.7536111111111,46,1872,0],
  [50,13023,0.06393273436444799,3.61,35,1850,0],
  [51,13046,0.14973281021845006,3.5091666666667,68,2879,0],
  [52,13032,0.041478839355346,3.4205555555556,82,1840,0],
  [53,13012,0.089317973365284,3.2647222222222,154,2134,0],
  [54,13051,0.088820248166203,2.7944444444444,128,2234,0],
  [55,12979,0.054872994406929,2.46,79,3769,0],
  [56,13025,0.07913553329046401,2.2075,66,2717,0],
  [57,13007,0.16317996709063,2.1758333333333,92,2171,0],
  [58,13036,0.08671926699280201,2.3058333333333,67,2224,0],
  [59,13043,0.0733999511789,2.3983333333333,58,1967,0],
  [60,13023,0.0,2.55,58,2148,0],
  [61,13022,0.032756244361869,2.7302777777778,63,1978,0],
  [62,13033,0.054893891024455,2.8169444444444003,61,2021,0],
  [63,13024,0.068514114108229,2.9247222222222,55,2060,0],
  [64,13048,0.05279414163165401,2.8911111111111003,71,2096],
  [65,13740,0.023853017353212,2.9575,64,2082,0],
  [66,13540,0.07426125441559799,2.9080555555556,92,2175,0],
  [67,12724,0.024228588329879,3.0088888888889,44,2332,0],
  [68,13070,0.09233413002519697,3.2033333333333,35,2147,0],
  [69,13106,0.15930655332113,3.6213888888889,53,2163,0],
  [70,13025,0.12755838225296,4.0322222222222,49,2406,0],
  [71,13074,0.10152541717054,4.1227777777778,49,2022,0],
  [72,13079,0.040148453968243986,3.9736111111111,103,2188,],
  [73,13184,0.087208372094752,3.8425,107,2758,0],
  [74,13194,0.074209918996797,3.7097222222222,74,2925,0],
  [75,13191,0.059044537369404015,3.6258333333333,56,3223,0],
  [76,13059,0.06248169832921499,3.4705555555556,60,2507,0],
  [77,13169,0.08876527685714597,3.2877777777778,73,2435,0],
  [78,13114,0.051354431854972,2.9286111111111004,99,2552,0],
  [79,13037,0.074790104163639,2.4888888888889,84,2540,0],
  [80,13179,0.091817341555971,2.2744444444444,129,2642,0],
  [81,13152,0.14762794333026005,2.1733333333333,101,2254,0],
  [82,13095,0.07101004447510299,2.3416666666667,101,2539,0],
  [83,13144,0.07689756334240598,2.3808333333333,51,2596,0],
  [84,13170,0.08412575787388403,2.4663888888889,95,2573,0],
  [85,13162,0.06328921386603299,2.6608333333333,48,2302,0],
  [86,13117,0.057393902128707,2.7558333333333,40,2991,0],
  [87,13129,0.041819399065704,2.8636111111111004,55,3141,0],
  [88,13386,0.073729686380986,2.7586111111111005,56,3285,0],
  [89,13929,0.15365285617975,2.7377777777778,935,3807,0],
  [90,13385,0.060355859742407016,2.6961111111111005,34,2892,0],
  [91,13106,0.10644586288975,2.8569444444444,57,2538,0],
  [92,13113,0.059314286360126985,3.1833333333333,70,2234,0],
  [93,13155,0.096293806236591,3.5544444444444,72,2707,0],
  [94,13186,0.085101425467407,3.8894444444444,66,2382,0],
  [95,13151,0.11149072274185,4.1138888888889,72,2426,0],
  [96,13156,0.076266981262989,3.9519444444444,49,2451,0],
  [97,12813,0.097952120177625,3.8275,41,2288,0],
  [98,12821,0.17250021935572,3.6438888888889,42,2256,0],
  [99,12867,0.11389182319254,3.5608333333333,39,2884,0],
  [100,12837,0.08999961787521,3.5013888888889,81,2398,0],
  [101,12911,0.048649372449385005,3.3088888888889,90,2239,0],
  [102,12842,0.13861764684085998,2.9063888888889,92,2248,0],
  [103,12905,0.1088795585287,2.5027777777777995,81,2387,0],
  [104,12993,0.054235162564995,2.2466666666667003,145,3876,0],
  [105,12974,0.0390040506742,2.1869444444444,47,3073,0],
  [106,13039,0.0744713077811,2.2402777777778,63,3113,0],
  [107,13322,0.040258943675435,2.3727777777778,118,3363,0],
  [108,13606,0.0,2.4566666666667003,56,3796,0],
  [109,13536,0.027955712584728,2.5452777777777995,127,4924,0],
  [110,13341,0.047309968420241,2.6830555555556,48,4300,0],
  [111,13360,0.016602764360002,2.805,114,5225,0],
  [112,13450,0.042432577628353986,2.7386111111111004,78,4047,0],
  [113,14102,0.051191743726563,2.7438888888888995,58,4134,0],
  [114,14026,0.0,2.7586111111111005,56,4786,0],
  [115,13162,0.056724832354639,2.9013888888889,67,4184,0],
  [116,13118,0.055771058827737,3.19,155,2888,0],
  [117,12953,0.081014772096658,3.5561111111111003,123,2674,0],
  [118,12854,0.08253629738290899,3.8433333333333,118,2574,0],
  [119,12952,0.11499203730886,4.0319444444444,133,3123,0],
  [120,12915,0.07668513845109799,3.8844444444444,75,3369,0],
  [121,11994,0.070057457403873,3.6908333333333,29,3284,0],
  [122,11868,0.07031477357556501,3.6141666666667,68,2127,0],
  [123,11977,0.091946448716499,3.5019444444444,91,2117,0],
  [124,11874,0.14560588482235998,3.4205555555556,101,2271,0],
  [125,11913,0.094774329323472,3.1780555555556,22,2513,0],
  [126,11933,0.10217989327054,2.8361111111111,20,2746,0],
  [127,11844,0.04854243074027901,2.5222222222222004,27,2076,0],
  [128,11968,0.068760549683423,2.2416666666667004,45,2297,0],
  [129,11996,0.075440683881139,2.1588888888889,42,2312,0],
  [130,12006,0.11771339431815,2.2763888888889,59,2834,0],
  [131,12225,0.069437397660265,2.3391666666667,52,3584,0],
  [132,12482,0.0,2.4841666666667,62,4009,0]
  # 133,12289,0.0,2.4911111111111,81,4142,0
  # 134,12219,0.0,2.6922222222222,84,3876,0
  # 135,12282,0.027395404320488,2.8205555555556,104,4098,0
  # 136,12367,0.055202605299814,2.8216666666667,111,3831,0
  # 137,13042,0.078387348178452,2.7122222222222,91,3842,0
  # 138,12665,0.11851571646444,2.6744444444444,33,4129,0
  # 139,12133,0.068395341911942,2.8097222222222,26,3509,0
  # 140,12023,0.04720597158087901,3.1838888888889,37,2450,0
  # 141,11847,0.07910648512645599,3.5130555555556,23,2270,0
  # 142,11980,0.067550601916344,3.7722222222222,29,2360,0
  # 143,12026,0.080666570182724,3.9058333333333,45,2431,0
  # 144,11852,0.044973875852863,3.7697222222222,49,2042,0
  # 145,12152,0.065734580284861,3.6027777777778,27,1833,0
  # 146,12148,0.068759646748575,3.5038888888889,46,1852,0
  # 147,12236,0.027278224398313,3.445,39,1927,0
  # 148,12155,0.067695565422881,3.3494444444444,72,1999,0
  # 149,12113,0.07244669924777,3.1961111111111005,81,2030,0
  # 150,12175,0.028882930937168,2.8905555555556,64,1963,0
  # 151,12103,0.021568136982842,2.5805555555556,79,2116,0
  # 152,12206,0.064254625408408,2.3380555555556004,132,2461,0
  # 153,12239,0.073869151016554,2.2116666666667,127,2388,0
  # 154,12398,0.026644044055307004,2.2013888888889,121,2846,0
  # 155,12582,0.051289858799957,2.3236111111111,98,2974,0
  # 156,12705,0.099217337562612,2.3002777777778,128,3776,0
  # 157,12555,0.016615805334675,2.385,158,3885,0
  # 158,12476,0.078387348178452,2.5597222222222005,78,3865,0
  # 159,12706,0.0,2.6941666666667,65,4319,0
  # 160,12671,0.049384244324413,2.7169444444444,81,4646,0
  # 161,13277,0.043044731483849,2.6369444444444,586,3873,0
  # 162,12757,0.04215504851616,2.6572222222222,48,3489,0
  # 163,12401,0.042236538352835,2.8466666666667004,38,2790,0
  # 164,12248,0.1001564296112,3.1955555555556,30,2641,0
  # 165,12156,0.17378132267942994,3.5633333333333,28,2960,0
  # 166,12210,0.12005519462968,3.8113888888889,36,2192,0
  # 167,11983,0.14491137762023998,3.9655555555556,50,2145,0
  # 168,12374,0.07336941078506799,3.8483333333333,47,2133,0
  # 169,12230,0.12395626148952,3.6441666666667,82,2330,0
  # 170,12200,0.15077430423660998,3.5213888888889,56,2235,0
  # 171,12135,0.18960071033689,3.4702777777778,140,2258,0
  # 172,12131,0.06051348935254,3.3033333333333,145,2200,0
  # 173,12165,0.072057993662839,3.1933333333333,114,2161,0
  # 174,12193,0.082361078437032,2.8183333333333,129,2159,0
  # 175,12165,0.12343775199876,2.52,143,2088,0
  # 176,12304,0.1071817784483,2.2886111111111,113,2473,0
  # 177,12275,0.10359394556779,2.0822222222222,108,3217,0
  # 178,12369,0.021162435488903,2.1416666666667,93,2994,0
  # 179,12569,0.074524398314698,2.2688888888889,63,3827,0
  # 180,12766,0.12687067454443,2.335,103,4176,0
  # 181,12621,0.041752618326160014,2.4388888888889,114,4227,0
  # 182,12611,0.0,2.5386111111111,67,4290,0
  # 183,12618,0.040819652463459,2.6288888888889,106,4691,0
  # 184,12631,0.082668981599835,2.7511111111111,160,4442,0
  # 185,13121,0.06181362481077901,2.7744444444444,81,5775,0
  # 186,12871,0.0,2.8297222222222,113,3840,0
  # 187,12252,0.076137992226715,2.9708333333333,37,3721,0
  # 188,12155,0.12107639529965,3.1333333333333,70,2498,0
  # 189,12186,0.0,3.3544444444444,82,2265,0
  # 190,12179,0.19840339729984,3.6780555555556,76,2451,0
  # 191,12109,0.20112394005693,3.8038888888889,59,2892,0
  # 192,12142,0.096833471661634,3.8177777777778,58,2166,0
  # 193,12145,0.10338450919956,3.6916666666667,49,2040,0
  # 194,12162,0.10142513773096,3.5197222222222,36,2013,0
  # 195,12165,0.09779274451732,3.5186111111111003,111,2000,0
  # 196,12125,0.14744152252573,3.2597222222222,81,2117,0
  # 197,12097,0.083396348606149,3.0930555555556,92,2775,0
  # 198,12099,0.095637498006913,2.7825,113,2116,0
  # 199,12140,0.14768844039376006,2.4494444444444,90,1991,0
  # 200,12188,0.1131872329372,2.2369444444444,183,3162,0
  # 201,12157,0.073729686380986,2.0961111111111,117,2958,0
  # 202,12128,0.064614077523704,2.0377777777778,110,3153,0
  # 203,12190,0.056019959597275015,2.0730555555556003,179,2190,0
  # 204,12151,0.074812141908008,2.1655555555556,134,2172,0
  # 205,12214,0.02489388427845201,2.285,135,2074,0
  # 206,12275,0.023695834967821,2.4283333333333,100,2078,0
  # 207,12164,0.058680009072634,2.6186111111111,47,2406,0
  # 208,12120,0.10008779345816002,2.7372222222222,88,2018,0
  # 209,12693,0.066566772961868,2.8266666666667004,74,2091,0
  # 210,12624,0.070501147961051,2.8469444444444,58,2310,0
  # 211,12163,0.098779019649936,2.9855555555556,100,2113,0
  # 212,12100,0.11803653713501,3.1038888888889,49,2518,0
  # 213,12162,0.10076746585103,3.4058333333333,36,2605,0
  # 214,12106,0.053210709415363,3.6138888888889,40,2680,0
  # 215,12156,0.099346579713514,3.93,50,2228,0
  # 216,12120,0.047275248011591,3.8155555555556,58,2023,0
  # 217,12420,0.091262209791582,3.6588888888889,50,3702,0
  # 218,12417,0.038593218846488,3.5913888888889,53,1992,0
  # 219,12450,0.070273907645883,3.4644444444444003,93,1988,0
  # 220,12395,0.029431888410363,3.3944444444444,78,1919,0
  # 221,12382,0.096854769984307,3.2227777777778,84,2213,0
  # 222,12438,0.11656453357642,2.7961111111111,112,2181,0
  # 223,12363,0.12109055114779,2.4383333333333,73,2152,0
  # 224,12393,0.20381554615786,2.2647222222222005,91,2393,0
  # 225,12399,0.046311768005022014,2.1886111111111,114,2173,0
  # 226,12456,0.18261306403662,2.2825,127,2109,0
  # 227,12442,0.021992750543024,2.3333333333333,69,3606,0
  # 228,12481,0.088072259040681,2.445,59,2114,0
  # 229,12432,0.037896500450725,2.5811111111111,64,2135,0
  # 230,12403,0.09882843339863,2.7094444444444,75,2303,0
  # 231,12406,0.076277687882641,2.88,44,2137,0
  # 232,12462,0.022875979046571,2.8555555555556,52,2264,0
  # 233,13034,0.10022162220861,2.7791666666667,42,2245,0
  # 234,12830,0.08117200437078799,2.7772222222222,45,2151,0
  # 235,12439,0.09750667785645803,3.02,26,2330,0
  # 236,12541,0.05680722879784299,3.2213888888888995,29,3357,0
  # 237,12462,0.12240855732315,3.6211111111111,32,3152,0
  # 238,12394,0.1715485140175,4.0219444444444,44,2693,0
  # 239,12507,0.075015592829224,4.0980555555556,41,3798,0
  # 240,12512,0.11388410095531,3.9080555555556,42,4596,0
  # 241,12093,0.10519027968795,3.7269444444444,46,2529,0
  # 242,12197,0.1150532998405,3.6244444444444,40,2124,0
  # 243,12138,0.10890530980571,3.5252777777778,64,2762,0
  # 244,12174,0.099350621485086,3.4675,70,2973,0
  # 245,12163,0.12889794040441002,3.3316666666667003,69,3041,0
  # 246,12096,0.12069378235889,2.9497222222222,73,2179,0
  # 247,12166,0.13053034917739,2.5708333333333,85,2322,0
  # 248,12187,0.078977758004111,2.3086111111111,63,2274,0
  # 249,12246,0.08088416337864099,2.2311111111111,67,2448,0
  # 250,12335,0.04008956024204,2.3119444444444,68,3811,0
  # 251,12556,0.05063725351997099,2.3536111111111,62,3761,0
  # 252,12652,0.039066291775136,2.4819444444444,69,4269,0
  # 253,12646,0.028611752774164,2.6605555555556,82,4244,0
  # 254,12803,0.040593364983329,2.7527777777778,56,4417,0
  # 255,12570,0.038807415292018,3.0741666666667005,38,3758,0
  # 256,12633,0.07832796288132203,2.8522222222222,30,4375,0
  # 257,13146,0.066320996162546,2.7277777777778,48,4158,0
  # 258,12994,0.083175583471284,2.7502777777778,63,3410,0
  # 259,12314,0.06802464587725401,2.8797222222222,34,2853,0
  # 260,12193,0.051675070535006,3.2027777777778,11,2628,0
  # 261,12127,0.044129112207997014,3.5633333333333,22,2287,0
  # 262,12140,0.037685894365982006,3.8808333333333,22,3334,0
  # 263,12174,0.093414561465838,4.0352777777778,12,2795,0
  # 264,12180,0.06987083046098,3.8966666666667,10,2089,0
  # 265,12861,0.021992750543024,3.7225,14,2260,0
  # 266,12957,0.11305566197523,3.73,39,3176,0
  # 267,12981,0.030884138240845,3.5558333333333,55,4049,0
  # 268,12958,0.10381377439313,3.3169444444444003,90,2902,0
  # 269,12913,0.048953768695625004,3.2322222222222,68,3743,0
  # 270,12939,0.042258794089861,2.8658333333333,95,4280,0
  # 271,12933,0.048388685585470985,2.5169444444444,70,3977,0
  # 272,13006,0.034197830567692,2.3,96,4518,0
  # 273,13091,0.08835953066771099,2.1888888888889,45,2707,0
  # 274,13201,0.086890518272785,2.2030555555556,96,3522,0
  # 275,13520,0.031087561676959,2.2711111111111,74,4584,0
  # 276,13675,0.071287463233942,2.4697222222222,82,4141,0
  # 277,13594,0.14372616993938,2.5988888888889,82,4831,0
  # 278,13466,0.12647517487142998,2.7258333333333,45,3991,0
  # 279,13448,0.042854531198562,2.7858333333333,134,4645,0
  # 280,13492,0.039930389849144,2.7922222222222,119,4967,0
  # 281,14123,0.076184645265048,2.6988888888889,86,4578,0
  # 282,13839,0.037830020408535,2.7663888888889,75,4972,0
  # 283,13335,0.030884138240845,2.8938888888889,45,5522,0
  # 284,13196,0.048316550276279,3.1875,50,2832,0
  # 285,13047,0.10986585566763,3.6463888888889,31,2826,0
  # 286,13008,0.025485002897852004,3.866666666666701,88,2855,0
  # 287,12763,0.12451757643335,3.9808333333333,42,2660,0
  # 288,12949,0.12875690949235,3.8277777777778,70,2447,0
  # 289,13009,0.15720639094135,3.6269444444444,106,2545,0
  # 290,13008,0.079092017261926,3.5266666666667,44,3842,0
  # 291,12890,0.14711499890479998,3.5077777777778,57,2332,0
  # 292,13004,0.0531410973178,3.3455555555556,95,2294,0
  # 293,12918,0.10136246281349,3.1241666666667003,91,3016,0
  # 294,12910,0.053119315802353,2.8713888888889,66,3944,0
  # 295,12915,0.11313351589999003,2.5133333333333,66,2332,0
  # 296,13121,0.076760188212735,2.2197222222222,82,2405,0
  # 297,13076,0.08890522133351199,2.205,73,2572,0
  # 298,13096,0.1009555130175,2.2677777777778,69,2558,0
  # 299,13339,0.15685427502807,2.2991666666667,107,3701,0
  # 300,13635,0.11090638960365,2.4277777777778,101,4228,0
  # 301,13493,0.054798089981891,2.5333333333333,66,3990,0
  # 302,13402,0.08461316628091001,2.6422222222222005,47,4707,0
  # 303,13417,0.15790425505315,2.8211111111111005,47,3857,0
  # 304,13382,0.021675109392134,2.7625,66,3874,0
  # 305,14199,0.14112049645292002,2.7391666666667,102,4369,0
  # 306,13973,0.059612111520904,2.7525,71,4488,0
  # 307,13284,0.067835890522602,2.8644444444444,53,3637,0
  # 308,13070,0.047414460026828,3.1927777777778,28,2705,0
  # 309,12983,0.050348669783997005,3.5872222222222,24,2429,0
  # 310,13075,0.07296715773193299,3.8305555555556,23,2839,0
  # 311,12991,0.10713527159169,3.8827777777778,30,2371,0
  # 312,12993,0.073622496612493,3.7291666666667,25,2758,0
  # 313,13121,0.11556476355437,3.6172222222222,29,2291,0
  # 314,13097,0.034160489683707995,3.4491666666667005,27,2220,0
  # 315,13150,0.019571935182124,3.4097222222222,77,2620,0
  # 316,13078,0.15720996206912,3.2605555555556,46,2467,0
  # 317,13140,0.11515041454164,3.2191666666667,86,2088,0
  # 318,13102,0.086415715789296,2.9586111111111,97,2137,0
  # 319,13110,0.092606306920552,2.6036111111111,88,2907,0
  # 320,13138,0.046458579038692015,2.3319444444444,110,2558,0
  # 321,13238,0.10977831600416,2.2025,89,2823,0
  # [322,13317,0.11090009191451,2.2711111111111,134,2465,0]
  # [323,13512,0.076652795374797,2.2897222222222005,84,4399,0]
  # [324,13669,0.1087202400467,2.3297222222222005,109,4088,0]
  # [325,13651,0.11471628863897,2.395,57,5099,0]
  # [326,13580,0.11070024667119,2.5063888888889,49,5157,0]
  # [327,13538,0.026827723134058,2.7077777777778,83,3782,0]
  # [328,13657,0.029426630692549,2.735,101,4008,0]
  # [329,14183,0.028611752774164,2.6958333333333,88,4534,0]
  # [330,14117,0.053106181092382014,2.6930555555556,56,3242,0]
]

df = pd.DataFrame (data, columns = ['timestamp','value_0','value_1','value_2','value_3','value_4','anomaly'])
dataset = generate_dataset(df, 6)

pipeline_description = Pipeline()
pipeline_description.add_input(name='inputs')

step_0 = PrimitiveStep(primitive=index.get_primitive('d3m.primitives.tods.data_processing.dataset_to_dataframe'))
step_0.add_argument(name='inputs', argument_type=ArgumentType.CONTAINER, data_reference='inputs.0')
step_0.add_output('produce')
pipeline_description.add_step(step_0)

step_1 = PrimitiveStep(primitive=index.get_primitive('d3m.primitives.tods.data_processing.column_parser'))
step_1.add_argument(name='inputs', argument_type=ArgumentType.CONTAINER, data_reference='steps.0.produce')
step_1.add_output('produce')
pipeline_description.add_step(step_1)

step_2 = PrimitiveStep(primitive=index.get_primitive('d3m.primitives.tods.data_processing.extract_columns_by_semantic_types'))
step_2.add_argument(name='inputs', argument_type=ArgumentType.CONTAINER, data_reference='steps.1.produce')
step_2.add_output('produce')
step_2.add_hyperparameter(name='semantic_types', argument_type=ArgumentType.VALUE,
																													data=['https://metadata.datadrivendiscovery.org/types/Attribute'])
pipeline_description.add_step(step_2)

step_3 = PrimitiveStep(primitive=index.get_primitive('d3m.primitives.tods.timeseries_processing.time_series_seasonality_trend_decomposition'))
step_3.add_argument(name='inputs', argument_type=ArgumentType.CONTAINER, data_reference='steps.2.produce')
step_3.add_output('produce')
pipeline_description.add_step(step_3)

step_4 = PrimitiveStep(primitive=index.get_primitive('d3m.primitives.tods.feature_analysis.fast_fourier_transform'))
step_4.add_argument(name='inputs', argument_type=ArgumentType.CONTAINER, data_reference='steps.3.produce')
step_4.add_output('produce')
pipeline_description.add_step(step_4)

step_5 = PrimitiveStep(primitive=index.get_primitive('d3m.primitives.tods.detection_algorithm.pyod_ae'))
step_5.add_argument(name='inputs', argument_type=ArgumentType.CONTAINER, data_reference='steps.4.produce')
step_5.add_output('produce')
pipeline_description.add_step(step_5)

step_6 = PrimitiveStep(primitive=index.get_primitive('d3m.primitives.tods.detection_algorithm.pyod_vae'))
step_6.add_argument(name='inputs', argument_type=ArgumentType.CONTAINER, data_reference='steps.5.produce')
step_6.add_output('produce')
pipeline_description.add_step(step_6)

step_7 = PrimitiveStep(primitive=index.get_primitive('d3m.primitives.tods.detection_algorithm.LSTMODetector'))
step_7.add_argument(name='inputs', argument_type=ArgumentType.CONTAINER, data_reference='steps.6.produce')
step_7.add_output('produce')
pipeline_description.add_step(step_7)

step_8 = PrimitiveStep(primitive=index.get_primitive('d3m.primitives.tods.detection_algorithm.deeplog'))
step_8.add_argument(name='inputs', argument_type=ArgumentType.CONTAINER, data_reference='steps.7.produce')
step_8.add_output('produce')
pipeline_description.add_step(step_8)

step_9 = PrimitiveStep(primitive=index.get_primitive('d3m.primitives.tods.detection_algorithm.pyod_mogaal'))
step_9.add_argument(name='inputs', argument_type=ArgumentType.CONTAINER, data_reference='steps.8.produce')
step_9.add_output('produce')
pipeline_description.add_step(step_9)

step_10 = PrimitiveStep(primitive=index.get_primitive('d3m.primitives.tods.detection_algorithm.pyod_sogaal'))
step_10.add_argument(name='inputs', argument_type=ArgumentType.CONTAINER, data_reference='steps.9.produce')
step_10.add_output('produce')
pipeline_description.add_step(step_10)

step_11 = PrimitiveStep(primitive=index.get_primitive('d3m.primitives.tods.detection_algorithm.telemanom'))
step_11.add_argument(name='inputs', argument_type=ArgumentType.CONTAINER, data_reference='steps.10.produce')
step_11.add_output('produce')
pipeline_description.add_step(step_11)

step_12 = PrimitiveStep(primitive=index.get_primitive('d3m.primitives.tods.data_processing.construct_predictions'))
step_12.add_argument(name='inputs', argument_type=ArgumentType.CONTAINER, data_reference='steps.11.produce')
step_12.add_argument(name='reference', argument_type=ArgumentType.CONTAINER, data_reference='steps.1.produce')
step_12.add_output('produce')
pipeline_description.add_step(step_12)

pipeline_description.add_output(name='output predictions', data_reference='steps.12.produce')
descrip = pipeline_description.to_json()

class testProducePipeline(unittest.TestCase):
	def test_Produce_Pipeline(self):
		self.fitted_pipeline = fit_pipeline(dataset, pipeline_description, 'F1_MACRO')
		fitted_pipeline_id = save_fitted_pipeline(self.fitted_pipeline)
		loaded_pipeline = load_fitted_pipeline(fitted_pipeline_id)
		pipeline_result = produce_fitted_pipeline(dataset, loaded_pipeline)

		temp = evaluate_pipeline(dataset, pipeline_description)

		assert(list(pd.DataFrame(pipeline_result.output.select_columns([1]))) == 
		list(pd.DataFrame(temp.outputs[0]['outputs.0'].select_columns([1]))))
if __name__ == '__main__':
	unittest.main()